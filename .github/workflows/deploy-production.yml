name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref (branch, tag, or SHA) to deploy (optional)
        required: false
      reason:
        description: Reason for manual run (optional)
        required: false

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRD }}
        run: doppler run -- npm run build

      - name: Deploy to production server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          # Create release directory
          RELEASE_DIR="/srv/www/clients/compliantesolutions/prod/releases/$(date +%Y%m%d%H%M%S)"
          
          # Create directory structure on server
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "mkdir -p $RELEASE_DIR"

          # Copy built files
          scp -i ~/.ssh/deploy_key -r .next package.json package-lock.json public $SSH_USER@$SSH_HOST:$RELEASE_DIR/

          # Deploy and restart
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST << EOF
            set -e
            set -u

            # Install dependencies in release directory
            cd "$RELEASE_DIR"
            npm ci --omit=dev
            
            # Update symlink
            ln -sfn "$RELEASE_DIR" /srv/www/clients/compliantesolutions/prod/current
            
            # Start application fresh with Doppler via PM2 (ensure new release CWD)
            cd /srv/www/clients/compliantesolutions/prod/current
            if command -v pm2 >/dev/null 2>&1; then
              doppler run --token=${{ secrets.DOPPLER_TOKEN_PRD }} -- pm2 delete compliantesolutions-production || true
              doppler run --token=${{ secrets.DOPPLER_TOKEN_PRD }} -- pm2 start npm --name compliantesolutions-production --cwd "$RELEASE_DIR" -- start
              pm2 save || true
            else
              doppler run --token=${{ secrets.DOPPLER_TOKEN_PRD }} -- npx pm2 delete compliantesolutions-production || true
              doppler run --token=${{ secrets.DOPPLER_TOKEN_PRD }} -- npx pm2 start npm --name compliantesolutions-production --cwd "$RELEASE_DIR" -- start
              npx pm2 save || true
            fi
            
            # Cleanup old releases (keep last 5)
            cd /srv/www/clients/compliantesolutions/prod/releases
            ls -t | tail -n +6 | xargs -r rm -rf
          EOF

      - name: Verify deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key $SSH_USER@$SSH_HOST "command -v pm2 >/dev/null 2>&1 && pm2 list | grep compliantesolutions-production || npx pm2 list | grep compliantesolutions-production"

      - name: Post-deploy health check (production)
        run: |
          URL="https://compliantesolutions.com/api/health"
          echo "Checking $URL ..."
          # Try a few times in case the app is still booting
          RESP=$(curl -fsS --max-time 15 --retry 5 --retry-delay 2 "$URL")
          echo "$RESP"
          echo "$RESP" | grep -q '"ok":true' && echo "Health check passed" || (echo "Health check failed" && exit 1)
